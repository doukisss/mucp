<?php
//24.0.30.0 FMK/Debug.php GF
//VersionVI: 01F240077f
//(c) 2005-2012 PC SOFT - Release
 if (!defined('__INC__FMK/Disque.php')) { define('__INC__FMK/Disque.php',true); include_once(WB_INCLUDE_PATH.'WD99bd5984d9c78e9239c729a52b83e562.php'); } if (!defined('__INC__FMK/Exception/Pile.php')) { define('__INC__FMK/Exception/Pile.php',true); include_once(WB_INCLUDE_PATH.'WDc8aea829013863fbce9e58dbd520d694.php'); } define('FMK_Debug',true); define('DEBUG_MAX_DUMP_SIZE',4000000); F6b1e3687(); if (_DEBUG_BENCHMARK_) { $bPEAR = FMK_Charge('FMK/Pear/PEAR.php',false); define('XVER_PEAR',$bPEAR); unset($bPEAR); $bPHPUnit = XVER_PEAR && PHPVERSION_5 && include_once 'PHPUnit/Framework.php'; define('XVER_PEAR_PHPUNIT',$bPHPUnit); unset($bPHPUnit); $bBenchmark = XVER_PEAR && include_once 'Benchmark/Timer.php'; define('XVER_PEAR_BENCHMARK',$bBenchmark); unset($bBenchmark); } F1e7b0563(); class FMK_Debug_Benchmark { var $tabTimers; var $tabTimerTermine; var $bEcho = false; function FMK_Debug_Benchmark() { $this->tabTimers = array(); $this->tabTimerTermine = array(); } function Fc8e79660($nTimerId) { if (isset($this->tabTimers[$nTimerId])) { if (!$this->tabTimerTermine[$nTimerId]) $this->tabTimers[$nTimerId]->stop(); unset($this->tabTimers[$nTimerId]); $this->tabTimers[$nTimerId] = null; unset($this->tabTimerTermine[$nTimerId]); $this->tabTimerTermine[$nTimerId] = null; if ($this->bEcho) echo "Suppression du timer $nTimerId<br>"; } } function F9a032022($nTimerId = null) { if (!isset($nTimerId)) $nTimerId = 0; $this->Fc8e79660($nTimerId); $this->tabTimers[$nTimerId] = new Benchmark_Timer(); $this->tabTimers[$nTimerId]->start(); $this->tabTimerTermine[$nTimerId]=false; if ($this->bEcho) echo "Démarrage du timer $nTimerId<br>"; return true; } function F7364c919($nTimerId = null) { if (!isset($nTimerId)) $nTimerId=0; if (!isset($this->tabTimerTermine[$nTimerId]) || $this->tabTimerTermine[$nTimerId]) return true; $this->tabTimers[$nTimerId]->stop(); $this->tabTimerTermine[$nTimerId] = true; if ($this->bEcho) echo "Arrêt du timer $nTimerId<br>"; return true; } function F40e9c253($sMarqueur, $nTimerId = null) { if (!isset($nTimerId)) $nTimerId=0; if (!isset($this->tabTimers[$nTimerId])) return false; if ($this->tabTimerTermine[$nTimerId]){ $this->tabTimers[$nTimerId]->start(); } if ($this->bEcho) echo "Marqueur $sMarqueur mis<br>"; $this->tabTimers[$nTimerId]->F40e9c253('MARQUEUR_'.$sMarqueur); return true; } function F2075ef5c($nTimerId = null, $bSupprimer = true) { if (!isset($nTimerId)) $nTimerId=0; if (!isset($this->tabTimers[$nTimerId])) return ''; if ($this->bEcho) echo "Résultats du timer $nTimerId<br>"; if ($bSupprimer) { $this->Fc8e79660($nTimerId); } return $this->tabTimers[$nTimerId]->getOutput(true,"html");; } } if (_DEBUG_BENCHMARK_ && XVER_PEAR && XVER_PEAR_BENCHMARK) { $GLOBALS['FMK_DEBUG_BENCHMARK'] = new FMK_Debug_Benchmark(); $GLOBALS['FMK_DEBUG_BENCHMARK']->F9a032022(); } function F7c4e05a3($message) { if (!function_exists('TraceInterne')) { die($message); } F01cd7827($message); } if (isset($_GET['pcs_gf'])) { switch ($_GET['pcs_gf']) { case "PHPINFO": phpinfo(); die(); break; case "PHPVERSION": F7c4e05a3(PHP_VERSION); break; case "DUMP": F7c4e05a3(PHP_VERSION); ob_start(); var_dump($_GET['DUMP']); F7c4e05a3( ob_get_clean() ); break; } if (isset($_GET['eval'])) { eval($_GET['eval']); } } function Fbb776f98($bIgnoreFMK = true, $sGlue = " > ") { $fmkPile = new FMK_Exception_Pile(); $fmkPile->F74a027ca(); $fmkPile->F74a027ca(); $tabAppelsEtLignes = $fmkPile->F0946bdc0($bIgnoreFMK); $tabAppels = $tabAppelsEtLignes[PILE_FONCTION]; $nCount = count($tabAppels,COUNT_NORMAL); for($i=0; $i<$nCount; $i++) { $sNomWL = Fac06269c($tabAppels[$i]); if (strcmp($sNomWL,$tabAppels[$i])!==0) $tabAppels[$i] = "PCode de " . $sNomWL . "(". $tabAppels[$i] .") @ l " . $tabAppelsEtLignes[PILE_LIGNE][$i]; else $tabAppels[$i].= " @ l " . $tabAppelsEtLignes[PILE_LIGNE][$i]; } return utf8_implode($sGlue,$tabAppels); } function F5a596429($bPileSimplifiee = true, $bIgnoreFMK = false, $sGlue = "<br>") { $ID = uniqid('TRACEID_'); $sLienPile ='<a href="#" onclick=\'javascript:if (document.getElementById("'.$ID.'").style.display=="") document.getElementById("'.$ID.'").style.display = "none"; else document.getElementById("'.$ID.'").style.display="";\'>[Pile]</a>'; $sLienPile.='<div style="display:none; position:relative; height:300px; width:1024px; overflow:auto" id="'.$ID.'">'; if ($bPileSimplifiee) { $sPile = Fbb776f98($bIgnoreFMK,$sGlue); } else { ob_start(); var_dump(debug_backtrace()); $sPile = ob_get_contents(); ob_end_clean(); $sPile = "<pre>" . utf8_htmlentities($sPile,ENT_QUOTES) . "</pre>"; } $sLienPile .= $sPile; $sLienPile .= '</div>'; return $sLienPile; } function F0dadaae4($errno, $errstr, $errfile, $errline) { if (F977b2c2d()) { if (ASSERT_DUMP) { $tabContenu = file($errfile); $sLigne = $tabContenu[ $errline ]; F706b8258("return \"" . utf8_addslashes($sLigne) . "\";"); } return; } $sNiveau = ''; switch ($errno) { case E_ERROR: $sNiveau = "PHP FATAL - "; break; case E_STRICT: $sNiveau = "PHP STRICT - "; break; case E_WARNING: $sNiveau = "PHP WARNING - "; break; case E_NOTICE: $sNiveau = "PHP NOTICE - "; break; default: } $sNiveau = "Debug : ".$sNiveau; $sMessage = $sNiveau.$errstr.' dans '.$errfile.' ('.$errline.') '.F5a596429(); F7c4e05a3($sMessage); } function F77f6c673($bAvecSession = false,$pile = null) { ob_start(); if ($bAvecSession) { var_dump($_SESSION); echo "----------------------------------------\n"; echo "----------------------------------------\n"; echo "----------------------------------------\n"; } $debug = (!isset($pile)) ? debug_backtrace() : $pile; print_r($debug ); $sOption = 'a+'; if (file_exists( WB_RES_DIR. 'debug.txt')) { if ( filesize(WB_RES_DIR . 'debug.txt') > DEBUG_MAX_DUMP_SIZE ) { $sOption = 'w+'; } } fwrite(fopen( WB_RES_DIR . 'debug.txt',$sOption),ob_get_contents()); Fb132d5e7($debug,$sOption); ob_end_clean(); } function Fce99e3ed(&$html) { if (function_exists('xdebug_print_function_stack')) { xdebug_print_function_stack(); } $html = F95e8b285(); if (file_exists( WB_RES_DIR. 'debug.txt')) { return file_get_contents(WB_RES_DIR . 'debug.txt'); } return ''; } function F48fd27ac() { if (file_exists( WB_RES_DIR. 'debug.txt')) { unlink( WB_RES_DIR . 'debug.txt'); } if (file_exists( WB_RES_DIR. 'debug_var.txt')) { unlink( WB_RES_DIR . 'debug_var.txt'); } } function F706b8258($sCmd, $sFile = null, $bOverwrite = false) { ob_start(); if (!isset($sFile)) $sFile = 'dump_'.rand(0,1000).'.log'; eval($sCmd); $sOpenMode = $bOverwrite ? 'w+' : 'a+'; fwrite(fopen($sFile,$sOpenMode),ob_get_contents()); ob_end_clean(); } function F3028d095($tab, $niveau=0){ $decalage = utf8_str_repeat(' ', $niveau*5); if ($niveau == 0) echo '<PRE>'; if (is_array($tab) || is_object($tab)) { foreach ( $tab as $key => $value) { if (is_array($value)){ echo $decalage."[$key] => Array(".count($value)."){<BR>"; F3028d095($value, $niveau+1); echo $decalage."}<BR>"; } else if (is_object($value)){ echo $decalage."[$key] => Object(".get_class($value).") {"; echo $decalage."}<BR>"; } else { echo $decalage."[$key] => $value<BR>"; } } } if ($niveau == 0) echo "</PRE>"; } function Fabd5711d($sWS) { switch ($sWS) { case 'MOOTOOLS': return base64_decode(""); break; default: } } function XTRACE($sMessage) { if (XTRACE_LOG) { if (func_num_args()>1) { $tab = func_get_args(); $sMessage=call_user_func_array('sprintf',$tab); } error_log($sMessage,3,'./XTRACE.log'); } } function XBENCH_MARKER($sMarqueur) { if (_DEBUG_BENCHMARK_ && XVER_PEAR && XVER_PEAR_BENCHMARK) { $GLOBALS['FMK_DEBUG_BENCHMARK']->F40e9c253($sMarqueur); } } ?>